package com.elearningpath.wetestx.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.elearningpath.wetestx.pojos.SingleArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SINGLE_ARTICLE".
*/
public class SingleArticleDao extends AbstractDao<SingleArticle, Long> {

    public static final String TABLENAME = "SINGLE_ARTICLE";

    /**
     * Properties of entity SingleArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OwnerId = new Property(1, Long.class, "ownerId", false, "OWNER_ID");
        public final static Property Classid = new Property(2, long.class, "classid", false, "CLASSID");
        public final static Property Displayorder = new Property(3, int.class, "displayorder", false, "DISPLAYORDER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
    }

    private Query<SingleArticle> articleTypeBean_DataListQuery;

    public SingleArticleDao(DaoConfig config) {
        super(config);
    }
    
    public SingleArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SINGLE_ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OWNER_ID\" INTEGER," + // 1: ownerId
                "\"CLASSID\" INTEGER NOT NULL ," + // 2: classid
                "\"DISPLAYORDER\" INTEGER NOT NULL ," + // 3: displayorder
                "\"NAME\" TEXT);"); // 4: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SINGLE_ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SingleArticle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(2, ownerId);
        }
        stmt.bindLong(3, entity.getClassid());
        stmt.bindLong(4, entity.getDisplayorder());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SingleArticle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(2, ownerId);
        }
        stmt.bindLong(3, entity.getClassid());
        stmt.bindLong(4, entity.getDisplayorder());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SingleArticle readEntity(Cursor cursor, int offset) {
        SingleArticle entity = new SingleArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ownerId
            cursor.getLong(offset + 2), // classid
            cursor.getInt(offset + 3), // displayorder
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SingleArticle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwnerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setClassid(cursor.getLong(offset + 2));
        entity.setDisplayorder(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SingleArticle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SingleArticle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SingleArticle entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dataList" to-many relationship of ArticleTypeBean. */
    public List<SingleArticle> _queryArticleTypeBean_DataList(Long ownerId) {
        synchronized (this) {
            if (articleTypeBean_DataListQuery == null) {
                QueryBuilder<SingleArticle> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OwnerId.eq(null));
                articleTypeBean_DataListQuery = queryBuilder.build();
            }
        }
        Query<SingleArticle> query = articleTypeBean_DataListQuery.forCurrentThread();
        query.setParameter(0, ownerId);
        return query.list();
    }

}
